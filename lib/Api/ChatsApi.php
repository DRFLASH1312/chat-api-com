<?php
/**
 * ChatsApi
 * PHP version 5
 *
 * @category Class
 * @package  ChatApiCom\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Whatsapp API documentation
 *
 * The REST API allows you to receive and send messages through your WhatsApp account.  Parameters in GET queries pass query string. Parameters in POST requests â€” through the JSON-encoded request body. The authorization token is always passed to query string (?token=xxxxxx).  The WhatsApp API is based on the WhatsApp WEB protocol and excludes the ban both when using libraries from mgp25 and the like. Despite this, your account can be banned by anti-spam system WhatsApp after several clicking the \"block\" button.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: sale@chat-api.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.4
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ChatApiCom\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use ChatApiCom\Client\ApiException;
use ChatApiCom\Client\Configuration;
use ChatApiCom\Client\HeaderSelector;
use ChatApiCom\Client\ObjectSerializer;

/**
 * ChatsApi Class Doc Comment
 *
 * @category Class
 * @package  ChatApiCom\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ChatsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration $config
     * @param HeaderSelector $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    )
    {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation addGroupParticipant
     *
     * Adding a participant to a group
     *
     * @param  \ChatApiCom\Client\Model\AddGroupParticipantAction $body body (required)
     * @param  string $group_id group_id (optional)
     * @param  string $participant_chat_id participant_chat_id (optional)
     * @param  int $participant_phone participant_phone (optional)
     *
     * @throws \ChatApiCom\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ChatApiCom\Client\Model\AddGroupParticipantStatus
     */
    public function addGroupParticipant($body, $group_id = null, $participant_chat_id = null, $participant_phone = null)
    {
        list($response) = $this->addGroupParticipantWithHttpInfo($body, $group_id, $participant_chat_id, $participant_phone);
        return $response;
    }

    /**
     * Operation addGroupParticipantWithHttpInfo
     *
     * Adding a participant to a group
     *
     * @param  \ChatApiCom\Client\Model\AddGroupParticipantAction $body (required)
     * @param  string $group_id (optional)
     * @param  string $participant_chat_id (optional)
     * @param  int $participant_phone (optional)
     *
     * @throws \ChatApiCom\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ChatApiCom\Client\Model\AddGroupParticipantStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function addGroupParticipantWithHttpInfo($body, $group_id = null, $participant_chat_id = null, $participant_phone = null)
    {
        $returnType = '\ChatApiCom\Client\Model\AddGroupParticipantStatus';
        $request = $this->addGroupParticipantRequest($body, $group_id, $participant_chat_id, $participant_phone);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];


        } catch (ApiException $e) {
            $returnType = '';
            $content = $e->getResponseBody();
            if ($returnType !== '\SplFileObject') {
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $content,
                        '\ChatApiCom\Client\Model\AddGroupParticipantStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addGroupParticipantAsync
     *
     * Adding a participant to a group
     *
     * @param  \ChatApiCom\Client\Model\AddGroupParticipantAction $body (required)
     * @param  string $group_id (optional)
     * @param  string $participant_chat_id (optional)
     * @param  int $participant_phone (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addGroupParticipantAsync($body, $group_id = null, $participant_chat_id = null, $participant_phone = null)
    {
        return $this->addGroupParticipantAsyncWithHttpInfo($body, $group_id, $participant_chat_id, $participant_phone)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addGroupParticipantAsyncWithHttpInfo
     *
     * Adding a participant to a group
     *
     * @param  \ChatApiCom\Client\Model\AddGroupParticipantAction $body (required)
     * @param  string $group_id (optional)
     * @param  string $participant_chat_id (optional)
     * @param  int $participant_phone (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addGroupParticipantAsyncWithHttpInfo($body, $group_id = null, $participant_chat_id = null, $participant_phone = null)
    {
        $returnType = '\ChatApiCom\Client\Model\AddGroupParticipantStatus';
        $request = $this->addGroupParticipantRequest($body, $group_id, $participant_chat_id, $participant_phone);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addGroupParticipant'
     *
     * @param  \ChatApiCom\Client\Model\AddGroupParticipantAction $body (required)
     * @param  string $group_id (optional)
     * @param  string $participant_chat_id (optional)
     * @param  int $participant_phone (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function addGroupParticipantRequest($body, $group_id = null, $participant_chat_id = null, $participant_phone = null)
    {
// verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling addGroupParticipant'
            );
        }
        $resourcePath = '/addGroupParticipant';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

// form params
        if ($group_id !== null) {
            $formParams['groupId'] = ObjectSerializer::toFormValue($group_id);
        }
// form params
        if ($participant_chat_id !== null) {
            $formParams['participantChatId'] = ObjectSerializer::toFormValue($participant_chat_id);
        }
// form params
        if ($participant_phone !== null) {
            $formParams['participantPhone'] = ObjectSerializer::toFormValue($participant_phone);
        }
// body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }
        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }
// this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $queryParams['token'] = $apiKey;
        }
        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $this->config->getInstanceId() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation creatGroup
     *
     * Creates a group and sends the message to the created group.
     *
     * @param  \ChatApiCom\Client\Model\CreateGroupAction $body body (required)
     * @param  string $group_name group_name (optional)
     * @param  string[] $phones phones (optional)
     * @param  string $message_text message_text (optional)
     *
     * @throws \ChatApiCom\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ChatApiCom\Client\Model\CreateGroupStatus
     */
    public function creatGroup($body, $group_name = null, $phones = null, $message_text = null)
    {
        list($response) = $this->creatGroupWithHttpInfo($body, $group_name, $phones, $message_text);
        return $response;
    }

    /**
     * Operation creatGroupWithHttpInfo
     *
     * Creates a group and sends the message to the created group.
     *
     * @param  \ChatApiCom\Client\Model\CreateGroupAction $body (required)
     * @param  string $group_name (optional)
     * @param  string[] $phones (optional)
     * @param  string $message_text (optional)
     *
     * @throws \ChatApiCom\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ChatApiCom\Client\Model\CreateGroupStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function creatGroupWithHttpInfo($body, $group_name = null, $phones = null, $message_text = null)
    {
        $returnType = '\ChatApiCom\Client\Model\CreateGroupStatus';
        $request = $this->creatGroupRequest($body, $group_name, $phones, $message_text);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];


        } catch (ApiException $e) {
            $returnType = '';
            $content = $e->getResponseBody();
            if ($returnType !== '\SplFileObject') {
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $content,
                        '\ChatApiCom\Client\Model\CreateGroupStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation creatGroupAsync
     *
     * Creates a group and sends the message to the created group.
     *
     * @param  \ChatApiCom\Client\Model\CreateGroupAction $body (required)
     * @param  string $group_name (optional)
     * @param  string[] $phones (optional)
     * @param  string $message_text (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creatGroupAsync($body, $group_name = null, $phones = null, $message_text = null)
    {
        return $this->creatGroupAsyncWithHttpInfo($body, $group_name, $phones, $message_text)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation creatGroupAsyncWithHttpInfo
     *
     * Creates a group and sends the message to the created group.
     *
     * @param  \ChatApiCom\Client\Model\CreateGroupAction $body (required)
     * @param  string $group_name (optional)
     * @param  string[] $phones (optional)
     * @param  string $message_text (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creatGroupAsyncWithHttpInfo($body, $group_name = null, $phones = null, $message_text = null)
    {
        $returnType = '\ChatApiCom\Client\Model\CreateGroupStatus';
        $request = $this->creatGroupRequest($body, $group_name, $phones, $message_text);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'creatGroup'
     *
     * @param  \ChatApiCom\Client\Model\CreateGroupAction $body (required)
     * @param  string $group_name (optional)
     * @param  string[] $phones (optional)
     * @param  string $message_text (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function creatGroupRequest($body, $group_name = null, $phones = null, $message_text = null)
    {
// verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling creatGroup'
            );
        }
        $resourcePath = '/group';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

// form params
        if ($group_name !== null) {
            $formParams['groupName'] = ObjectSerializer::toFormValue($group_name);
        }
// form params
        if ($phones !== null) {
            $formParams['phones'] = ObjectSerializer::toFormValue($phones);
        }
// form params
        if ($message_text !== null) {
            $formParams['messageText'] = ObjectSerializer::toFormValue($message_text);
        }
// body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }
        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }
        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $this->config->getInstanceId() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getChats
     *
     * Get the chat list.
     *
     *
     * @throws \ChatApiCom\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ChatApiCom\Client\Model\Chats
     */
    public function getChats()
    {
        list($response) = $this->getChatsWithHttpInfo();
        return $response;
    }

    /**
     * Operation getChatsWithHttpInfo
     *
     * Get the chat list.
     *
     *
     * @throws \ChatApiCom\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ChatApiCom\Client\Model\Chats, HTTP status code, HTTP response headers (array of strings)
     */
    public function getChatsWithHttpInfo()
    {
        $returnType = '\ChatApiCom\Client\Model\Chats';
        $request = $this->getChatsRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];


        } catch (ApiException $e) {
            $returnType = '';
            $content = $e->getResponseBody();
            if ($returnType !== '\SplFileObject') {
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $content,
                        '\ChatApiCom\Client\Model\Chats',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getChatsAsync
     *
     * Get the chat list.
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getChatsAsync()
    {
        return $this->getChatsAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getChatsAsyncWithHttpInfo
     *
     * Get the chat list.
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getChatsAsyncWithHttpInfo()
    {
        $returnType = '\ChatApiCom\Client\Model\Chats';
        $request = $this->getChatsRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getChats'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getChatsRequest()
    {
        $resourcePath = '/dialogs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

// body params
        $_tempBody = null;
        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }
// this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $queryParams['token'] = $apiKey;
        }
        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $this->config->getInstanceId() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation readChat
     *
     * Open chat for reading messages
     *
     * @param  \ChatApiCom\Client\Model\ReadChatAction $body body (required)
     * @param  string $chat_id chat_id (optional)
     * @param  string $phone phone (optional)
     *
     * @throws \ChatApiCom\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ChatApiCom\Client\Model\ReadChatStatus
     */
    public function readChat($body, $chat_id = null, $phone = null)
    {
        list($response) = $this->readChatWithHttpInfo($body, $chat_id, $phone);
        return $response;
    }

    /**
     * Operation readChatWithHttpInfo
     *
     * Open chat for reading messages
     *
     * @param  \ChatApiCom\Client\Model\ReadChatAction $body (required)
     * @param  string $chat_id (optional)
     * @param  string $phone (optional)
     *
     * @throws \ChatApiCom\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ChatApiCom\Client\Model\ReadChatStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function readChatWithHttpInfo($body, $chat_id = null, $phone = null)
    {
        $returnType = '\ChatApiCom\Client\Model\ReadChatStatus';
        $request = $this->readChatRequest($body, $chat_id, $phone);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];


        } catch (ApiException $e) {
            $returnType = '';
            $content = $e->getResponseBody();
            if ($returnType !== '\SplFileObject') {
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $content,
                        '\ChatApiCom\Client\Model\ReadChatStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation readChatAsync
     *
     * Open chat for reading messages
     *
     * @param  \ChatApiCom\Client\Model\ReadChatAction $body (required)
     * @param  string $chat_id (optional)
     * @param  string $phone (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function readChatAsync($body, $chat_id = null, $phone = null)
    {
        return $this->readChatAsyncWithHttpInfo($body, $chat_id, $phone)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation readChatAsyncWithHttpInfo
     *
     * Open chat for reading messages
     *
     * @param  \ChatApiCom\Client\Model\ReadChatAction $body (required)
     * @param  string $chat_id (optional)
     * @param  string $phone (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function readChatAsyncWithHttpInfo($body, $chat_id = null, $phone = null)
    {
        $returnType = '\ChatApiCom\Client\Model\ReadChatStatus';
        $request = $this->readChatRequest($body, $chat_id, $phone);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'readChat'
     *
     * @param  \ChatApiCom\Client\Model\ReadChatAction $body (required)
     * @param  string $chat_id (optional)
     * @param  string $phone (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function readChatRequest($body, $chat_id = null, $phone = null)
    {
// verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling readChat'
            );
        }
        $resourcePath = '/readChat';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

// form params
        if ($chat_id !== null) {
            $formParams['chatId'] = ObjectSerializer::toFormValue($chat_id);
        }
// form params
        if ($phone !== null) {
            $formParams['phone'] = ObjectSerializer::toFormValue($phone);
        }
// body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }
        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }
// this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $queryParams['token'] = $apiKey;
        }
        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $this->config->getInstanceId() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
